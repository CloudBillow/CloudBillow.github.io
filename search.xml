<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>自定义SpringBoot-Starter</title>
      <link href="/2023/08/14/2023-08-14-%E8%87%AA%E5%AE%9A%E4%B9%89SpringBoot-Starter/"/>
      <url>/2023/08/14/2023-08-14-%E8%87%AA%E5%AE%9A%E4%B9%89SpringBoot-Starter/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="什么是-SpringBoot-Starter"><a href="#什么是-SpringBoot-Starter" class="headerlink" title="什么是 SpringBoot-Starter"></a>什么是 SpringBoot-Starter</h2><p>Spring Boot Starter 是 Spring Boot 框架中的一个重要概念，它是一种用于简化项目配置和依赖管理的方式。在 Spring Boot 中，应用程序通常需要引入许多依赖库和配置，以实现特定的功能或集成特定的技术栈。Spring Boot Starter 通过预定义的依赖和配置来简化这个过程，让开发人员能够更轻松地搭建和配置应用程序。</p><h2 id="为什么要自定义-Starter"><a href="#为什么要自定义-Starter" class="headerlink" title="为什么要自定义 Starter"></a>为什么要自定义 Starter</h2><ol><li>模块化和复用性： 自定义 Starter 允许你将通用功能封装为可重用的模块。这可以使你在多个项目中轻松地使用相同的功能，减少重复代码的编写。</li><li>内部标准化： 如果你的组织内部有一些通用的技术选型、配置和最佳实践，你可以创建自定义 Starter 来强制执行这些标准，从而提高代码的一致性和可维护性。</li><li>简化团队开发： 自定义 Starter 可以帮助团队成员更容易地使用相同的技术栈和配置，减少了新成员加入或跨项目切换时的学习曲线。</li><li>定制化需求： 你可以根据项目的特定需求创建自定义 Starter，将其与通用功能集成，从而更好地满足项目的独特要求。</li><li>隐藏复杂性： 如果你的项目需要集成多个组件或依赖项，你可以通过自定义 Starter 来隐藏底层的复杂性，提供一个更简洁的界面供开发人员使用。</li><li>提高开发效率： 自定义 Starter 可以减少项目配置的工作量，使开发人员能够更快速地启动和开发应用程序。</li><li>促进规范： 自定义 Starter 可以推动项目内部遵循特定的架构、模式和规范，从而促进代码质量和一致性。</li><li>对外开放： 如果你的项目提供一些可扩展的功能或插件，你可以将其封装为自定义 Starter，方便其他开发人员在他们的项目中使用。</li></ol><h1 id="自定义Starter"><a href="#自定义Starter" class="headerlink" title="自定义Starter"></a>自定义Starter</h1><h2 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h2><ul><li><p>SpringBoot官方提供的Starter的命名规则：<code>spring-boot-starter-&#123;name&#125;</code>，其中<code>&#123;name&#125;</code>为自定义的 Starter 名称。</p></li><li><p>自定义Starter的命名规则：<code>&#123;name&#125;-spring-boot-starter</code>，其中<code>&#123;name&#125;</code>为自定义的 Starter 名称。</p></li></ul><h2 id="自动装配原理"><a href="#自动装配原理" class="headerlink" title="自动装配原理"></a>自动装配原理</h2><ul><li>Spring Boot 会扫描类路径下的<code>META-INF/spring.factories</code>文件，这个文件列出了可用的自动配置类。</li><li>配置类通过条件注解来判断这个配置类是否生效，如果生效，就会自动配置。例如：<code>@ConditionalOnClass</code>注解表示当类路径下有指定的类时，配置类才会生效。</li></ul><h2 id="创建-Starter-步骤"><a href="#创建-Starter-步骤" class="headerlink" title="创建 Starter 步骤"></a>创建 Starter 步骤</h2><h3 id="创建-Maven-项目"><a href="#创建-Maven-项目" class="headerlink" title="创建 Maven 项目"></a>创建 Maven 项目</h3><p> 新建一个空的 Maven 项目：</p><p><img src="/../img/posts/2023-08-14-%E8%87%AA%E5%AE%9A%E4%B9%89SpringBoot-Starter/new-maven-project.png" alt="img.png"></p><p>Spring Boot Starter 项目无需启动类，且通常不包含任何代码，只包含一些依赖和配置。</p><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.cloud.billow<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>notify-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Spring Boot 自动配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Spring Boot 配置处理器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 其他依赖项 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="编写配置类"><a href="#编写配置类" class="headerlink" title="编写配置类"></a>编写配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通知配置类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> CloudBillow</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2023/08/14 14:29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(NotifyProperties.class)</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = NotifyProperties.NOTIFY_PREFIX)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NotifyProperties</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">NOTIFY_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;notify&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送人</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String from;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接收人</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String to;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写-Service-类"><a href="#编写-Service-类" class="headerlink" title="编写 Service 类"></a>编写 Service 类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 微信通知类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> CloudBillow</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2023/08/14 14:34</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WXNotifyService</span> <span class="keyword">implements</span> <span class="title class_">NotifyService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> NotifyProperties notifyProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">sendNotify</span><span class="params">(String content)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">from</span> <span class="operator">=</span> notifyProperties.getFrom();</span><br><span class="line">            <span class="type">String</span> <span class="variable">to</span> <span class="operator">=</span> notifyProperties.getTo();</span><br><span class="line">            System.out.println(<span class="string">&quot;from: &quot;</span> + from + <span class="string">&quot;, to: &quot;</span> + to + <span class="string">&quot;, content: &quot;</span> + content);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写自动配置类"><a href="#编写自动配置类" class="headerlink" title="编写自动配置类"></a>编写自动配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通知自动配置类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> CloudBillow</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2023/08/14 14:32</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(name = &quot;com.cloud.billow.properties.NotifyProperties&quot;)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(NotifyProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NotifyAutoConfiguration</span> <span class="keyword">implements</span> <span class="title class_">InitializingBean</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> NotifyProperties notifyProperties;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NotifyAutoConfiguration</span><span class="params">(NotifyProperties notifyProperties)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.notifyProperties = notifyProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="keyword">public</span> NotifyService <span class="title function_">notifyService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">WXNotifyService</span> <span class="variable">wxNotifyService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WXNotifyService</span>();</span><br><span class="line">        wxNotifyService.setNotifyProperties(notifyProperties);</span><br><span class="line">        <span class="keyword">return</span> wxNotifyService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 校验参数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写-spring-factories-文件"><a href="#编写-spring-factories-文件" class="headerlink" title="编写 spring.factories 文件"></a>编写 spring.factories 文件</h3><p>在<code>src/main/resources</code>目录下创建<code>META-INF/spring.factories</code>文件，内容如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span>=<span class="string">\</span></span><br><span class="line"><span class="string">  com.cloud.billow.configuration.NotifyAutoConfiguration</span></span><br></pre></td></tr></table></figure><h3 id="使用Maven打包"><a href="#使用Maven打包" class="headerlink" title="使用Maven打包"></a>使用Maven打包</h3><p><img src="/../img/posts/2023-08-14-%E8%87%AA%E5%AE%9A%E4%B9%89SpringBoot-Starter/install-maven.png" alt="install-maven.png"></p><h3 id="使用自定义-Starter"><a href="#使用自定义-Starter" class="headerlink" title="使用自定义 Starter"></a>使用自定义 Starter</h3><p>引入自定义 Starter 依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.cloud.billow<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>notify-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置自定义 Starter：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">notify:</span></span><br><span class="line">  <span class="attr">to:</span> <span class="string">小明</span></span><br><span class="line">  <span class="attr">from:</span> <span class="string">小红</span></span><br></pre></td></tr></table></figure><blockquote><p>由于引入了<code>configuration-processor</code>依赖，所以在配置文件中输入<code>notify</code>前缀时，会有提示，如下图所示<br><img src="/../img/posts/2023-08-14-%E8%87%AA%E5%AE%9A%E4%B9%89SpringBoot-Starter/starter-config.png" alt="starter-config.png"></p></blockquote><p>使用自定义 Starter：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = &quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isSuccess</span> <span class="operator">=</span> notifyService.sendNotify(<span class="string">&quot;这个是消息的内容&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> String.valueOf(isSuccess);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><p><img src="/../img/posts/2023-08-14-%E8%87%AA%E5%AE%9A%E4%B9%89SpringBoot-Starter/output.png" alt="output.png"></p>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CompletableFuture的使用</title>
      <link href="/2021/08/10/2021-08-10-CompletableFuture%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2021/08/10/2021-08-10-CompletableFuture%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>CompletableFuture类提供了非常强大的Future的扩展功能，可以帮助我们简化异步编程的复杂性，提供了函数式编程的能力，可以通过回调的方式处理计算结果，并且提供了转换和组合CompletableFuture的方法。</p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><table>    <tr>        <th>分类</th>        <th>方法名</th>        <th>描述</th>    </tr>    <tr>        <th rowspan="2">创建异步任务</th>        <td><code>runAsync</code></td>        <td>不支持返回值</td>    </tr>    <tr>        <td><code>supplyAsync</code></td>        <td>支持返回值</td>    </tr>    <tr>        <th rowspan="6">创建异步任务</th>        <td><code>thenRun</code>、<code>thenRunAsync</code></td>        <td>不接参数、无返回值</td>    </tr>    <tr>        <td><code>thenAccept</code>、<code>thenAcceptAsync</code></td>        <td>接返回值、无返回值</td>    </tr>    <tr>        <td><code>thenApply</code>、<code>thenApplyAsync</code></td>        <td>接返回值、有返回值</td>    </tr>    <tr>        <td><code>exceptionally</code>、<code>exceptionallyAsync</code></td>        <td>接异常、有返回值</td>    </tr>    <tr>        <td><code>whenComplete</code>、<code>whenCompleteAsync</code></td>        <td>接返回值和异常、无返回值</td>    </tr>    <tr>        <td><code>handle</code>、<code>handleAsync</code></td>        <td>接返回值和异常、有返回值</td>    </tr>    <tr>        <th rowspan="7">两个任务组合</th>        <td><code>thenCompose</code>、<code>thenComposeAsync</code></td>        <td>任务转化</td>    </tr>    <tr>        <td><code>thenCombine</code>、<code>thenCombineAsync</code></td>        <td>“且”组合、接返回值、有返回值</td>    </tr>    <tr>        <td><code>thenAcceptBoth</code>、<code>thenAcceptBothAsync</code></td>        <td>“且”组合、接返回值、无返回值</td>    </tr>    <tr>        <td><code>runAfterBoth</code>、<code>runAfterBothAsync</code></td>        <td>“且”组合、不接参数、无返回值</td>    </tr>    <tr>        <td><code>applyToEither</code>、<code>applyToEitherAsync</code></td>        <td>“或”组合、接返回值、有返回值</td>    </tr>    <tr>        <td><code>acceptEither</code>、<code>acceptEitherAsync</code></td>        <td>“或”组合、接返回值、无返回值</td>    </tr>    <tr>        <td><code>runAfterEither</code>、<code>runAfterEitherAsync</code></td>        <td>“或”组合、不接参数、无返回值</td>    </tr>    <tr>        <th rowspan="2">多个任务组合</th>        <td><code>anyOf</code></td>        <td>“任意一个”组合</td>    </tr>    <tr>        <td><code>allOf</code></td>        <td>“所有”组合</td>    </tr></table><blockquote><p>在CompletableFuture中如果使用没有指定线程池的方法，则会使用<code>ForkJoinPool.commonPool()</code>作为它的线程池执行异步代码。</p></blockquote><h1 id="创建异步任务"><a href="#创建异步任务" class="headerlink" title="创建异步任务"></a>创建异步任务</h1><h3 id="不支持返回值"><a href="#不支持返回值" class="headerlink" title="不支持返回值"></a>不支持返回值</h3><ul><li>方法签名<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用默认线程池中的线程</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> CompletableFuture&lt;Void&gt; <span class="title function_">runAsync</span><span class="params">(Runnable runnable)</span>;</span><br><span class="line"><span class="comment">// 使用自定义线程池中的线程</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> CompletableFuture&lt;Void&gt; <span class="title function_">runAsync</span><span class="params">(Runnable runnable, Executor executor)</span>; </span><br></pre></td></tr></table></figure></li><li>示例代码<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">    <span class="comment">// TODO 执行任务</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h3 id="支持返回值"><a href="#支持返回值" class="headerlink" title="支持返回值"></a>支持返回值</h3><ul><li><p>方法签名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用默认线程池中的线程</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class="title function_">supplyAsync</span><span class="params">(Supplier&lt;U&gt; supplier)</span>;</span><br><span class="line"><span class="comment">// 使用自定义线程池中的线程</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class="title function_">supplyAsync</span><span class="params">(Supplier&lt;U&gt; supplier, Executor executor)</span>; </span><br></pre></td></tr></table></figure></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    <span class="comment">// TODO 执行任务</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h1 id="任务完成时回调方法"><a href="#任务完成时回调方法" class="headerlink" title="任务完成时回调方法"></a>任务完成时回调方法</h1><p>当CompletableFuture任务执行完成或者抛出异常的时候，可以执行特定的回调方法。</p><h3 id="不接参数、无返回值"><a href="#不接参数、无返回值" class="headerlink" title="不接参数、无返回值"></a>不接参数、无返回值</h3><blockquote><p>前一个任务执行完成后执行；任务之间<strong>无参数传递</strong>，回调方法<strong>无返回值</strong></p></blockquote><ul><li>方法签名<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用调用它的线程上运行（一般是主线程）</span></span><br><span class="line"><span class="keyword">public</span> CompletableFuture&lt;Void&gt; <span class="title function_">thenRun</span><span class="params">(Runnable action)</span>;</span><br><span class="line"><span class="comment">// 使用默认线程池中的线程</span></span><br><span class="line"><span class="keyword">public</span> CompletableFuture&lt;Void&gt; <span class="title function_">thenRunAsync</span><span class="params">(Runnable action)</span>;</span><br><span class="line"><span class="comment">// 使用自定义线程池中的线程</span></span><br><span class="line"><span class="keyword">public</span> CompletableFuture&lt;Void&gt; <span class="title function_">thenRunAsync</span><span class="params">(Runnable action, Executor executor)</span>;</span><br></pre></td></tr></table></figure></li><li>示例代码<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">&#125;).thenRun(() -&gt; &#123;</span><br><span class="line">    <span class="comment">// TODO 执行任务</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h3 id="接返回值、无返回值"><a href="#接返回值、无返回值" class="headerlink" title="接返回值、无返回值"></a>接返回值、无返回值</h3><blockquote><p>前一个任务执行完成后执行；前一个任务会将执行结果<strong>作为参数</strong>，传递到回调方法中，回调方法<strong>无返回值</strong></p></blockquote><ul><li>方法签名<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用调用它的线程上运行（一般是主线程）</span></span><br><span class="line"><span class="keyword">public</span> CompletableFuture&lt;Void&gt; <span class="title function_">thenAccept</span><span class="params">(Consumer&lt;? <span class="built_in">super</span> T&gt; action)</span>;</span><br><span class="line"><span class="comment">// 使用默认线程池中的线程</span></span><br><span class="line"><span class="keyword">public</span> CompletableFuture&lt;Void&gt; <span class="title function_">thenAcceptAsync</span><span class="params">(Consumer&lt;? <span class="built_in">super</span> T&gt; action)</span>;</span><br><span class="line"><span class="comment">// 使用自定义线程池中的线程</span></span><br><span class="line"><span class="keyword">public</span> CompletableFuture&lt;Void&gt; <span class="title function_">thenAcceptAsync</span><span class="params">(Consumer&lt;? <span class="built_in">super</span> T&gt; action, Executor executor)</span>;</span><br></pre></td></tr></table></figure></li><li>示例代码<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Result&quot;</span>;</span><br><span class="line">&#125;).thenAccept((result) -&gt; &#123;</span><br><span class="line">    <span class="comment">// TODO 执行任务</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h3 id="接返回值、有返回值"><a href="#接返回值、有返回值" class="headerlink" title="接返回值、有返回值"></a>接返回值、有返回值</h3><blockquote><p>前一个任务执行完成后执行；前一个任务会将执行结果<strong>作为参数</strong>，传递到回调方法中，并且会调方法<strong>有返回值</strong></p></blockquote><ul><li>方法签名<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用调用它的线程上运行（一般是主线程）</span></span><br><span class="line"><span class="keyword">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class="title function_">thenApply</span><span class="params">(Function&lt;? <span class="built_in">super</span> T,? extends U&gt; fn)</span>;</span><br><span class="line"><span class="comment">// 使用默认线程池中的线程</span></span><br><span class="line"><span class="keyword">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class="title function_">thenApplyAsync</span><span class="params">(Function&lt;? <span class="built_in">super</span> T,? extends U&gt; fn)</span>;</span><br><span class="line"><span class="comment">// 使用自定义线程池中的线程</span></span><br><span class="line"><span class="keyword">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class="title function_">thenApplyAsync</span><span class="params">(Function&lt;? <span class="built_in">super</span> T,? extends U&gt; fn, Executor executor)</span>;</span><br></pre></td></tr></table></figure></li><li>示例代码<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Result_1&quot;</span>;</span><br><span class="line">&#125;).thenApply(() -&gt; &#123;</span><br><span class="line">    <span class="comment">// TODO 执行任务</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Result_2&quot;</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h3 id="接异常、有返回值"><a href="#接异常、有返回值" class="headerlink" title="接异常、有返回值"></a>接异常、有返回值</h3><blockquote><p>某个任务执行异常时执行；异常任务抛出的异常<strong>作为参数</strong>，传递到回调方法中，并且会调方法<strong>有返回值</strong></p></blockquote><ul><li>方法签名<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用调用它的线程上运行（一般是主线程）</span></span><br><span class="line"><span class="keyword">public</span> CompletableFuture&lt;T&gt; <span class="title function_">exceptionally</span><span class="params">(Function&lt;Throwable, ? extends T&gt; fn)</span>;</span><br><span class="line"><span class="comment">// 使用默认线程池中的线程</span></span><br><span class="line"><span class="keyword">public</span> CompletableFuture&lt;T&gt; <span class="title function_">exceptionallyAsync</span><span class="params">(Function&lt;Throwable, ? extends T&gt; fn)</span>;</span><br><span class="line"><span class="comment">// 使用自定义线程池中的线程</span></span><br><span class="line"><span class="keyword">public</span> CompletableFuture&lt;T&gt; <span class="title function_">exceptionallyAsync</span><span class="params">(Function&lt;Throwable, ? extends T&gt; fn, Executor executor)</span>;</span><br></pre></td></tr></table></figure></li><li>示例代码<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>();</span><br><span class="line">&#125;).exceptionally((exception) -&gt; &#123;</span><br><span class="line">    <span class="comment">// TODO 处理异常</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;ERROR!&quot;</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h3 id="接返回值和异常、无返回值"><a href="#接返回值和异常、无返回值" class="headerlink" title="接返回值和异常、无返回值"></a>接返回值和异常、无返回值</h3><blockquote><p>前一个任务执行完成或出现异常时执行；前一个任务会将结果或抛出的异常<strong>作为参数</strong>，传递到回调方法中，回调方法<strong>无返回值</strong></p></blockquote><ul><li>方法签名<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用调用它的线程上运行（一般是主线程）</span></span><br><span class="line"><span class="keyword">public</span> CompletableFuture&lt;T&gt; <span class="title function_">whenComplete</span><span class="params">(BiConsumer&lt;? <span class="built_in">super</span> T, ? <span class="built_in">super</span> Throwable&gt; action)</span>;</span><br><span class="line"><span class="comment">// 使用默认线程池中的线程</span></span><br><span class="line"><span class="keyword">public</span> CompletableFuture&lt;T&gt; <span class="title function_">whenCompleteAsync</span><span class="params">(BiConsumer&lt;? <span class="built_in">super</span> T, ? <span class="built_in">super</span> Throwable&gt; action)</span>;</span><br><span class="line"><span class="comment">// 使用自定义线程池中的线程</span></span><br><span class="line"><span class="keyword">public</span> CompletableFuture&lt;T&gt; <span class="title function_">whenCompleteAsync</span><span class="params">(BiConsumer&lt;? <span class="built_in">super</span> T, ? <span class="built_in">super</span> Throwable&gt; action, Executor executor)</span>;</span><br></pre></td></tr></table></figure></li><li>示例代码<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>();</span><br><span class="line">&#125;).whenCompleteAsync((result, exception) -&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (exception != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// TODO 处理异常</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// TODO 执行任务</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h3 id="接返回值和异常、有返回值"><a href="#接返回值和异常、有返回值" class="headerlink" title="接返回值和异常、有返回值"></a>接返回值和异常、有返回值</h3><blockquote><p>前一个任务执行完成后执行；前一个任务会将结果或抛出的异常<strong>作为参数</strong>，传递到回调方法中，回调方法<strong>有返回值</strong></p></blockquote><ul><li>方法签名<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用调用它的线程上运行（一般是主线程）</span></span><br><span class="line"><span class="keyword">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class="title function_">handle</span><span class="params">(BiFunction&lt;? <span class="built_in">super</span> T, Throwable, ? extends U&gt; fn)</span>;</span><br><span class="line"><span class="comment">// 使用默认线程池中的线程</span></span><br><span class="line"><span class="keyword">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class="title function_">handleAsync</span><span class="params">(BiFunction&lt;? <span class="built_in">super</span> T, Throwable, ? extends U&gt; fn)</span>;</span><br><span class="line"><span class="comment">// 使用自定义线程池中的线程</span></span><br><span class="line"><span class="keyword">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class="title function_">handleAsync</span><span class="params">(BiFunction&lt;? <span class="built_in">super</span> T, Throwable, ? extends U&gt; fn, Executor executor)</span>;</span><br></pre></td></tr></table></figure></li><li>示例代码<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>();</span><br><span class="line">&#125;).handleAsync((result, exception) -&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (exception != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// TODO 处理异常</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ERROR!&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 执行任务</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;SUCCESS!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h1 id="两个任务组合"><a href="#两个任务组合" class="headerlink" title="两个任务组合"></a>两个任务组合</h1><h3 id="任务转化"><a href="#任务转化" class="headerlink" title="任务转化"></a>任务转化</h3><blockquote><p>将前一个任务的执行结果<strong>作为参数</strong>进行处理，处理后<strong>返回一个新的任务</strong></p></blockquote><ul><li>方法签名<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用调用它的线程上运行（一般是主线程）</span></span><br><span class="line"><span class="keyword">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class="title function_">thenCompose</span><span class="params">(Function&lt;? <span class="built_in">super</span> T, ? extends CompletionStage&lt;U&gt;&gt; fn)</span>;</span><br><span class="line"><span class="comment">// 使用默认线程池中的线程</span></span><br><span class="line"><span class="keyword">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class="title function_">thenComposeAsync</span><span class="params">(Function&lt;? <span class="built_in">super</span> T, ? extends CompletionStage&lt;U&gt;&gt; fn)</span>;</span><br><span class="line"><span class="comment">// 使用自定义线程池中的线程</span></span><br><span class="line"><span class="keyword">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class="title function_">thenComposeAsync</span><span class="params">(Function&lt;? <span class="built_in">super</span> T, ? extends CompletionStage&lt;U&gt;&gt; fn, Executor executor)</span>;</span><br></pre></td></tr></table></figure></li><li>示例代码<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture&lt;String&gt; task = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;任务一的结果&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">CompletableFuture&lt;String&gt; stringCompletableFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;任务二的结果&quot;</span>;</span><br><span class="line">&#125;).thenComposeAsync((result) -&gt; &#123;</span><br><span class="line">    <span class="comment">// TODO 执行任务</span></span><br><span class="line">    <span class="keyword">return</span> task;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h3 id="“且”组合、接返回值、有返回值"><a href="#“且”组合、接返回值、有返回值" class="headerlink" title="“且”组合、接返回值、有返回值"></a>“且”组合、接返回值、有返回值</h3><blockquote><p>将两个任务组合，当两个任务都正常执行完了，将两个任务的结果作为参数，传递到回调方法中，回调方法有返回值</p></blockquote><ul><li>方法签名<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用调用它的线程上运行（一般是主线程）</span></span><br><span class="line"><span class="keyword">public</span> &lt;U,V&gt; CompletableFuture&lt;V&gt; <span class="title function_">thenCombine</span><span class="params">(CompletionStage&lt;? extends U&gt; other, BiFunction&lt;? <span class="built_in">super</span> T,? <span class="built_in">super</span> U,? extends V&gt; fn)</span>;</span><br><span class="line"><span class="comment">// 使用默认线程池中的线程</span></span><br><span class="line"><span class="keyword">public</span> &lt;U,V&gt; CompletableFuture&lt;V&gt; <span class="title function_">thenCombineAsync</span><span class="params">(CompletionStage&lt;? extends U&gt; other, BiFunction&lt;? <span class="built_in">super</span> T,? <span class="built_in">super</span> U,? extends V&gt; fn)</span>;</span><br><span class="line"><span class="comment">// 使用自定义线程池中的线程</span></span><br><span class="line"><span class="keyword">public</span> &lt;U,V&gt; CompletableFuture&lt;V&gt; <span class="title function_">thenCombineAsync</span><span class="params">(CompletionStage&lt;? extends U&gt; other, BiFunction&lt;? <span class="built_in">super</span> T,? <span class="built_in">super</span> U,? extends V&gt; fn, Executor executor)</span>;</span><br></pre></td></tr></table></figure></li><li>示例代码<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    <span class="comment">// TODO 任务一</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;任务一的结果&quot;</span>;</span><br><span class="line">&#125;).thenCombineAsync(CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    <span class="comment">// TODO 任务二</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;任务二的结果&quot;</span>;</span><br><span class="line">&#125;), (result1, result2) -&gt; &#123;</span><br><span class="line">    <span class="comment">// 任务一和任务二都完成时执行的回调方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h3 id="“且”组合、接返回值、无返回值"><a href="#“且”组合、接返回值、无返回值" class="headerlink" title="“且”组合、接返回值、无返回值"></a>“且”组合、接返回值、无返回值</h3><blockquote><p>将两个任务组合，当两个任务都正常执行完了，将两个任务的结果作为参数，传递到回调方法中，回调方法无返回值</p></blockquote><ul><li>方法签名<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用调用它的线程上运行（一般是主线程）</span></span><br><span class="line"><span class="keyword">public</span> &lt;U&gt; CompletableFuture&lt;Void&gt; <span class="title function_">thenAcceptBoth</span><span class="params">(CompletionStage&lt;? extends U&gt; other, BiConsumer&lt;? <span class="built_in">super</span> T, ? <span class="built_in">super</span> U&gt; action)</span>;</span><br><span class="line"><span class="comment">// 使用默认线程池中的线程</span></span><br><span class="line"><span class="keyword">public</span> &lt;U&gt; CompletableFuture&lt;Void&gt; <span class="title function_">thenAcceptBothAsync</span><span class="params">(CompletionStage&lt;? extends U&gt; other, BiConsumer&lt;? <span class="built_in">super</span> T, ? <span class="built_in">super</span> U&gt; action)</span>;</span><br><span class="line"><span class="comment">// 使用自定义线程池中的线程</span></span><br><span class="line"><span class="keyword">public</span> &lt;U&gt; CompletableFuture&lt;Void&gt; <span class="title function_">thenAcceptBothAsync</span><span class="params">(CompletionStage&lt;? extends U&gt; other, BiConsumer&lt;? <span class="built_in">super</span> T, ? <span class="built_in">super</span> U&gt; action, Executor executor)</span>;</span><br></pre></td></tr></table></figure></li><li>示例代码<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    <span class="comment">// TODO 任务一</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;任务一的结果&quot;</span>;</span><br><span class="line">&#125;).thenAcceptBothAsync(CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    <span class="comment">// TODO 任务二</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;任务二的结果&quot;</span>;</span><br><span class="line">&#125;), (result1, result2) -&gt; &#123;</span><br><span class="line">    <span class="comment">// TODO 任务一和任务二都完成时执行的回调方法</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h3 id="“且”组合、不接参数、无返回值"><a href="#“且”组合、不接参数、无返回值" class="headerlink" title="“且”组合、不接参数、无返回值"></a>“且”组合、不接参数、无返回值</h3><blockquote><p>将两个任务组合，当两个任务都正常执行完了，执行回调方法，回调方法无返回值</p></blockquote><ul><li>方法签名<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用调用它的线程上运行（一般是主线程）</span></span><br><span class="line"><span class="keyword">public</span> CompletableFuture&lt;Void&gt; <span class="title function_">runAfterBoth</span><span class="params">(CompletionStage&lt;?&gt; other, Runnable action)</span>;</span><br><span class="line"><span class="comment">// 使用默认线程池中的线程</span></span><br><span class="line"><span class="keyword">public</span> CompletableFuture&lt;Void&gt; <span class="title function_">runAfterBothAsync</span><span class="params">(CompletionStage&lt;?&gt; other, Runnable action)</span>;</span><br><span class="line"><span class="comment">// 使用自定义线程池中的线程</span></span><br><span class="line"><span class="keyword">public</span> CompletableFuture&lt;Void&gt; <span class="title function_">runAfterBothAsync</span><span class="params">(CompletionStage&lt;?&gt; other, Runnable action, Executor executor)</span>;</span><br></pre></td></tr></table></figure></li><li>示例代码<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    <span class="comment">// TODO 任务一</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;任务一的结果&quot;</span>;</span><br><span class="line">&#125;).runAfterBothAsync(CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    <span class="comment">// TODO 任务二</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;任务二的结果&quot;</span>;</span><br><span class="line">&#125;), () -&gt; &#123;</span><br><span class="line">    <span class="comment">// TODO 任务一和任务二都完成时执行的回调方法</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h3 id="“或”组合、接返回值、有返回值"><a href="#“或”组合、接返回值、有返回值" class="headerlink" title="“或”组合、接返回值、有返回值"></a>“或”组合、接返回值、有返回值</h3><blockquote><p>将两个任务组合，其中任意一个任务执行完成，将该任务的结果作为参数，传递到回调方法中，回调方法有返回值</p></blockquote><ul><li>方法签名<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用调用它的线程上运行（一般是主线程）</span></span><br><span class="line"><span class="keyword">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class="title function_">applyToEither</span><span class="params">(CompletionStage&lt;? extends T&gt; other, Function&lt;? <span class="built_in">super</span> T, U&gt; fn)</span>;</span><br><span class="line"><span class="comment">// 使用默认线程池中的线程</span></span><br><span class="line"><span class="keyword">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class="title function_">applyToEitherAsync</span><span class="params">(CompletionStage&lt;? extends T&gt; other, Function&lt;? <span class="built_in">super</span> T, U&gt; fn)</span>;</span><br><span class="line"><span class="comment">// 使用自定义线程池中的线程</span></span><br><span class="line"><span class="keyword">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class="title function_">applyToEitherAsync</span><span class="params">(CompletionStage&lt;? extends T&gt; other, Function&lt;? <span class="built_in">super</span> T, U&gt; fn, Executor executor)</span>;</span><br></pre></td></tr></table></figure></li><li>示例代码<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    <span class="comment">// TODO 任务一</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;任务一的结果&quot;</span>;</span><br><span class="line">&#125;).applyToEitherAsync(CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    <span class="comment">// TODO 任务二</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;任务二的结果&quot;</span>;</span><br><span class="line">&#125;), (result) -&gt; &#123;</span><br><span class="line">    <span class="comment">// TODO 任务一和任务二任意一个执行完成时执行的回调方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;SUCCESS&quot;</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h3 id="“或”组合、接返回值、无返回值"><a href="#“或”组合、接返回值、无返回值" class="headerlink" title="“或”组合、接返回值、无返回值"></a>“或”组合、接返回值、无返回值</h3><blockquote><p>将两个任务组合，其中任意一个任务执行完成，将该任务的结果作为参数，传递到回调方法中，回调方法无返回值</p></blockquote><ul><li>方法签名<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用调用它的线程上运行（一般是主线程）</span></span><br><span class="line"><span class="keyword">public</span> CompletableFuture&lt;Void&gt; <span class="title function_">acceptEither</span><span class="params">(CompletionStage&lt;? extends T&gt; other, Consumer&lt;? <span class="built_in">super</span> T&gt; action)</span>;</span><br><span class="line"><span class="comment">// 使用默认线程池中的线程</span></span><br><span class="line"><span class="keyword">public</span> CompletableFuture&lt;Void&gt; <span class="title function_">acceptEitherAsync</span><span class="params">(CompletionStage&lt;? extends T&gt; other, Consumer&lt;? <span class="built_in">super</span> T&gt; action)</span>;</span><br><span class="line"><span class="comment">// 使用自定义线程池中的线程</span></span><br><span class="line"><span class="keyword">public</span> CompletableFuture&lt;Void&gt; <span class="title function_">acceptEitherAsync</span><span class="params">(CompletionStage&lt;? extends T&gt; other, Consumer&lt;? <span class="built_in">super</span> T&gt; action, Executor executor)</span>;</span><br></pre></td></tr></table></figure></li><li>示例代码<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    <span class="comment">// TODO 任务一</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">10</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;任务一的结果&quot;</span>;</span><br><span class="line">&#125;).acceptEitherAsync(CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    <span class="comment">// TODO 任务二</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;任务二的结果&quot;</span>;</span><br><span class="line">&#125;), (result) -&gt; &#123;</span><br><span class="line">    <span class="comment">// TODO 任务一和任务二任意一个执行完成时执行的回调方法</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h3 id="“或”组合、不接参数、无返回值"><a href="#“或”组合、不接参数、无返回值" class="headerlink" title="“或”组合、不接参数、无返回值"></a>“或”组合、不接参数、无返回值</h3><blockquote><p>将两个任务组合，其中任意一个任务执行完成，执行回调方法，回调方法无返回值</p></blockquote><ul><li>方法签名<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用调用它的线程上运行（一般是主线程）</span></span><br><span class="line"><span class="keyword">public</span> CompletableFuture&lt;Void&gt; <span class="title function_">runAfterEither</span><span class="params">(CompletionStage&lt;?&gt; other, Runnable action)</span>;</span><br><span class="line"><span class="comment">// 使用默认线程池中的线程</span></span><br><span class="line"><span class="keyword">public</span> CompletableFuture&lt;Void&gt; <span class="title function_">runAfterEitherAsync</span><span class="params">(CompletionStage&lt;?&gt; other, Runnable action)</span>;</span><br><span class="line"><span class="comment">// 使用自定义线程池中的线程</span></span><br><span class="line"><span class="keyword">public</span> CompletableFuture&lt;Void&gt; <span class="title function_">runAfterEitherAsync</span><span class="params">(CompletionStage&lt;?&gt; other, Runnable action, Executor executor)</span>;</span><br></pre></td></tr></table></figure></li><li>示例代码<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    <span class="comment">// TODO 任务一</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">10</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;任务一的结果&quot;</span>;</span><br><span class="line">&#125;).runAfterEitherAsync(CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    <span class="comment">// TODO 任务二</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;任务二的结果&quot;</span>;</span><br><span class="line">&#125;), () -&gt; &#123;</span><br><span class="line">    <span class="comment">// TODO 任务一和任务二任意一个执行完成时执行的回调方法</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h1 id="多个任务组合"><a href="#多个任务组合" class="headerlink" title="多个任务组合"></a>多个任务组合</h1><h3 id="“任意一个”组合"><a href="#“任意一个”组合" class="headerlink" title="“任意一个”组合"></a>“任意一个”组合</h3><blockquote><p>将多个任务组合，其中任意一个任务执行完成即可拿到该任务的执行结果（执行结果为Object类型），或执行接下来的任务</p></blockquote><ul><li>方法签名<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> CompletableFuture&lt;Object&gt; <span class="title function_">anyOf</span><span class="params">(CompletableFuture&lt;?&gt;... cfs)</span>;</span><br></pre></td></tr></table></figure></li><li>示例代码<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture&lt;String&gt; task1 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;任务一的结果&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">CompletableFuture&lt;String&gt; task2 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;任务二的结果&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> CompletableFuture.anyOf(task1, task2).join();</span><br></pre></td></tr></table></figure></li></ul><h3 id="“所有”组合"><a href="#“所有”组合" class="headerlink" title="“所有”组合"></a>“所有”组合</h3><blockquote><p>将多个任务组合，当所有任务都执行完成后执行接下来的任务</p></blockquote><ul><li>方法签名<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> CompletableFuture&lt;Void&gt; <span class="title function_">allOf</span><span class="params">(CompletableFuture&lt;?&gt;... cfs)</span>;</span><br></pre></td></tr></table></figure></li><li>示例代码<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture&lt;String&gt; task1 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;任务一的结果&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">CompletableFuture&lt;String&gt; task2 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;任务二的结果&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="type">Object</span> <span class="variable">join</span> <span class="operator">=</span> CompletableFuture.allOf(task1, task2).join();</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 并发 </tag>
            
            <tag> CompletableFuture </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Hexo</title>
      <link href="/2020/03/10/2020-03-10-Hello%20Hexo/"/>
      <url>/2020/03/10/2020-03-10-Hello%20Hexo/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Clean-cache"><a href="#Clean-cache" class="headerlink" title="Clean cache"></a>Clean cache</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/commands.html#clean">Commands Clean</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
